routes.py

from app import app, db
from flask import Flask, request, jsonify, session, redirect, url_for
import json
from models import User, Event
import re
import os
from datetime import datetime

USER_FILE = 'dummy/users.json'




### Login and Registration Routes and Functions ###

# Get all users
# Query all users from db and return them as a list
@app.route("/api/users", methods = ["GET"]) # http://localhost/api/users url to see this table
def get_users():
    users = User.query.all()
    result = [user.to_json() for user in users]
    return jsonify(result), 200

@app.route("/api/eventlist", methods = ["GET"])
def get_events():
    #events = Event.query.all() This is for when the database is implemented
    #result = [event.to_json() for event in events]
    #return jsonify(result), 200
    events = read_events_from_file()
    return jsonify(events), 200
def read_events_from_file():
    if os.path.exists('dummy/events.json'):
        with open('dummy/events.json', 'r') as f:
            return json.load(f)  # Directly return the loaded list
    return [] # Return an empty list if the file does not exist
def add_events_to_file(events):
    with open('dummy/events.json', 'w') as f:
        json.dump(events, f, indent=4)

# This is responsible for editing existing events
@app.route("/api/eventlist/<int:event_id>", methods=["PUT"])
def update_event(event_id):
    data = request.get_json()
    events = read_events_from_file()
    for event in events:
        if event['id'] == event_id:
            event.update(data)
            break
    add_events_to_file(events)
    return jsonify({"msg": "Event updated successfully"}), 200

@app.route("/api/eventlist/<int:event_id>", methods=["DELETE"])
def delete_event(event_id):
    events = read_events_from_file()
    event_to_delete = next((event for event in events if event['id'] == event_id), None)

    if event_to_delete is None:
        return jsonify({"msg": "Event not found"}), 404

    events = [event for event in events if event['id'] != event_id]
    add_events_to_file(events)
    return jsonify({"msg": "Event deleted successfully"}), 200

@app.route("/api/newevent", methods = ["POST"])
def post_event():
    data = request.get_json()
    print(data)
    events = read_events_from_file()
    events.append(data)
    add_events_to_file(events)
    return jsonify({"msg": "Event created successfully"}), 201

@app.route("/api/register", methods = ["GET"])
def register_users():
    return "Hello, welcome to register"

# Loads user data from json file. Simulates loading from a database for testing
def load_users():
    if not os.path.exists(USER_FILE):
        return {"users": []} # if no file, return empty string
    with open(USER_FILE, 'r') as f:
        return json.load(f) # returns user json object as dictionary

# Saves updated users.json
def save_users(data):
    with open(USER_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# Function to get user by email
def get_user_by_email(email):
    data = load_users()
    for user in data['users']:
        if user['email'].lower() == email.lower(): # ignore case sensitivity
            return user
    return None

# Function to add new user
def add_user(email, password):
    data = load_users()
    new_user_id = len(data['users']) + 1 # increment id
    new_user = {
        "id": new_user_id,
        "email": email,
        "password": password,
        "admin": False
    }
    data['users'].append(new_user)
    save_users(data)
    return new_user

# Return the logged in user's ID
def get_logged_in_user():
    user_id = session['user_id']
    if user_id:
        return user_id
    else:
        return None

# Functions to validate registration inputs
def validate_email(email):
    email_regex = r'^[^\s@]+@[^\s@]+\.[^\s@]+$'
    return re.match(email_regex, email) is not None

# Ensure password requirements are met
def validate_password(password):
    return len(password) > 0 and len(password) <= 128

# Functions to validate login inputs
def validate_login_email(email):
    valid = True
    email_regex = r'^[^\s@]+@[^\s@]+\.[^\s@]+$'
    if re.match(email_regex, email) is not None:
        valid = False
    return valid

# Register validation route
@app.route("/api/register", methods = ["POST"])
def register():
    data = request.get_json()
    email = data.get("email")
    password = data.get("password")
    user = get_user_by_email(email)

    # Check if user already exists
    if user is not None:
        return jsonify({"msg": "An account with this email already exists"}), 400

    # validate email and password
    if not validate_email(email):
        return jsonify({"msg": "Invalid email"}), 400
    if not validate_password(password):
        return jsonify({"msg": "Invalid password"}), 400

    # if validations pass add user and return success response
    add_user(email, password)
    return jsonify({"msg": "Registration successful"}), 200

# Test login function
@app.route("/api/login", methods = ["POST"])
def login():
    data = request.get_json()
    email = data.get("email")
    password = data.get("password")

    # get user corresponding to email input
    user = get_user_by_email(email)

    # Checks if user exists and if email matches password
    if user is not None:
        if password == user['password']:
            session['user_id'] = user['id'] # Store user ID in session
            session['admin'] = user['admin'] # Store user admin status in session
            print(f"User logged in with ID: {session['user_id']}")
            print(f"User logged in with Admin Status: {session['admin']}")
            return jsonify({"success": True, "msg": "Login successful"}), 200

    return jsonify({"success": False, "msg": "Invalid email or password"}), 401

# To view login route
@app.route("/api/login", methods = ["GET"])
def login_users():
    return "Hello, welcome to login"

# Route to get session admin status
@app.route('/api/isadmin', methods=['GET'])
def is_admin():
    if 'admin' in session:
        print(f"User logged in with Admin Status: {session['admin']}")
        return jsonify({"admin": session['admin']}), 200

    return jsonify({"admin": False}), 200# Default to false if admin is not in session


### Notification route and functions ###

# Load notifs from json file
def load_notifications():
    with open('dummy/notifications.json', 'r') as file:
        return json.load(file)

# Saves notifs to json file
def save_notifications(notifications):
    with open('dummy/notifications.json', 'w') as file:
        json.dump(notifications, file, indent=4)

# Get all user notifications
@app.route('/api/notifications', methods=['GET'])
def get_notifications():
    #print(request.headers) # Log request headers
    user_id = session['user_id']
    print(f"User ID from session: {user_id}")
    if not user_id:
        return jsonify({'msg': 'User not logged in'}), 401
    notifications = load_notifications()
    return jsonify(notifications.get(user_id, []))

# Delete notifs from json file
@app.route('/api/notifications', methods=['DELETE'])
def delete_notification():
    user_id = session.get('user_id')
    if not user_id:
        return jsonify({'msg': 'User not logged in'}), 401

    data = request.get_json()
    notification_id = data.get('notification_id')

    if not notification_id:
        return jsonify({'msg': 'Notification ID is required'}), 400

    notifications = load_notifications()
    user_notifications = notifications.get(user_id, [])
    notifications[user_id] = [n for n in user_notifications if str(n['id']) != notification_id]

    save_notifications(notifications)
    return '', 204

# Adds notifications to user
@app.route('/api/notifications', methods=['POST'])
def add_notification(user_id):
    notifications = load_notifications()
    new_notification = request.json
    if user_id in notifications:
        notifications[user_id].append(new_notification)
    else:
        notifications[user_id] = [new_notification]
    save_notifications(notifications)
    return jsonify(new_notification), 201

@app.route("/api/volunteerhistory", methods = ["GET"])
def get_history():
    # session['user_id'] = "1" #manually
    user_id = session['user_id']
    if not user_id:
        return jsonify({'msg': 'User not logged in'}), 401
    history = []
    if os.path.exists('dummy/history.json'):
        with open('dummy/history.json', 'r') as f:
            history = json.load(f)
    return jsonify(history.get(user_id, [])), 200

@app.route("/api/userprofile", methods = ["GET"])
def get_userinfo():
    # session['user_id'] = "1" #manually
    user_id = session['user_id']
    if not user_id:
        return jsonify({'msg': 'User not logged in'}), 401
    info = []
    if os.path.exists('dummy/userinfo.json'):
        with open('dummy/userinfo.json', 'r') as f:
            info = json.load(f)
    return jsonify(info.get(user_id, [])), 200

@app.route("/api/userprofile/<int:user_id>", methods=["PUT"])
def update_userinfo(user_id):
    data = request.get_json()
    old_data = []

    # Get old data
    if os.path.exists('dummy/userinfo.json'):
        with open('dummy/userinfo.json', 'r') as f:
            old_data = json.load(f)

    if str(user_id) in old_data:
        user_info = old_data[str(user_id)][0]  # Access the first object in the list
        user_info.update(data)  # Update the user info
    
    # Write data into json
    with open('dummy/userinfo.json', 'w') as f:
        json.dump(old_data, f, indent=4)
    return jsonify({"msg": "User info updated successfully"}), 200


history.json
{
    "1": [
      {
        "eventName": "Tech Conference 2024",
        "description": "Join us for a day of insightful talks and networking with industry leaders in technology.",
        "location": "San Francisco, CA",
        "skills": ["Teamwork", "Detail Oriented"],
        "urgency": "High",
        "eventDate": "2024-10-15",
        "eventStatus": "On-going"
      },
      {
        "eventName": "Music Festival",
        "description": "A weekend filled with live music performances from top artists around the world.",
        "location": "Austin, TX",
        "skills": ["Patience", "Communication"],
        "urgency": "Low",
        "eventDate": "2024-09-25",
        "eventStatus": "Completed"
      }],
    "2": [
      {
        "eventName": "Startup Pitch Night",
        "description": "Watch innovative startups pitch their ideas to investors and compete for prizes.",
        "location": "New York, NY",
        "skills": ["Leadership", "Teamwork", "Confidence"],
        "urgency": "Intermediate",
        "eventDate": "2024-11-05",
        "eventStatus": "On-going"
      }]
}
 
userinfo.json
{
    "1": [
        {
            "id": "1",
            "fullname": "Elon Musk",
            "address1": "123 Maple Street",
            "address2": "",
            "city": "Austin",
            "state": "TX",
            "zipcode": "78701",
            "skills": [
                "Adaptability",
                "Good with children",
                "Creativity"
            ],
            "preference": "",
            "availability": [
                "2024-10-10"
            ],
            "volunteer": []
        }
    ],
    "2": [
        {
            "id": "2",
            "fullname": "Sarah Johnson",
            "address1": "456 Elm Avenue",
            "address2": "Suite 101",
            "city": "Chicago",
            "state": "IL",
            "zipcode": "60607",
            "skills": [
                "Responsibility"
            ],
            "preference": "",
            "availability": [
                "2025-10-10"
            ],
            "volunteer": []
        }
    ],
    "3": [
        {
            "id": "3",
            "fullname": "Michael Jackson",
            "address1": "789 Oak Boulevard",
            "address2": "",
            "city": "San Francisco",
            "state": "CA",
            "zipcode": "94103",
            "skills": [
                "Patience",
                "Problem Solver"
            ],
            "preference": "",
            "availability": [],
            "volunteer": []
        }
    ]
}

userprofile.css
.userprofilepage{
    display:flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.centered-square{
    display: flex;
    max-height: 80vh;
    overflow-y: auto;
    width: 700px;
    border-radius: 15px;
    box-shadow: 3px 3px 8px 3px #45b6fe;
    background-color: white;
    padding: 30px;
    font-weight: bold;
    font-size: 20px;
}

.required{
    color: red;
    font-size: 15px;
}

.instruction{
    font-style: italic;
    font-size: 20px;
}

.pad-10{
    padding: 10px;
}

.inputbox{
    border-radius: 10px;
    padding: 15px;
    width: 600px;
    height: 20px;
}

.state-box{
    border-radius: 10px;
    padding: 5px;
    width: 600px;
    height: 30px;
}

.selectbox{
    border-radius: 10px;
    width: 600px;
    height: 100px;
    border-style: solid;
}

.pad-10 button{
    background-color: '#28a745',
    /* borderRadius: '20px',
    cursor: 'pointer',
    marginRight: '10px',
    fontSize: '1em' */
}

.selected-skills, .selected-availability {
    margin-top: 10px;
    display: flex;
    flex-wrap: wrap;
}

.skill-item, .availability-item {
    display: flex;
    align-items: center;
    font-size: 13px;
    /* display: inline-block; */
    padding: 5px 10px;
    margin: 5px;
    background-color: #f0f0f0;
    border-radius: 20px;
}

.remove-skill, .remove-availability {
    background: none;
    border: none;
    color: red;
    cursor: pointer;
    margin-left: 8px;
}

userprofile.jsx
import React, { useState, useEffect } from 'react';
import Navbar from "../../components/Navbar/Navbar";
import Footer from "../../components/Footer/Footer";
import "./userprofile.css";

function UserProfile() {

    const [userInfo, setUserInfo] = useState({
        id:'',
        fullname: '',
        address1: '',
        address2: '',
        city: '',
        state: '',
        zipcode: '',
        skills: [],
        preference: '',
        availability: [],
        volunteer: []
    })

    // Temporary constant while user is editing
    const[formData, setFormData] = useState({
        selectedDate: ""

    })

    useEffect(() => {
        fetch("http://127.0.0.1:5000/api/userprofile", {
            method: 'GET',
            credentials: 'include',
        })
            .then(response => {
                if (!response.ok) {
                    console.error('Unable to load user information:', response.statusText);
                    return; // Exit the promise chain
                }
                return response.json();
            })
            .then(data => {
                setUserInfo(data[0]);
                setFormData({
                    selectedDate: data[0].availability[0] || ""
                })

            })
            .catch(error => console.error('Error:', error));
    }, []);

    // Handle input change for the form fields for existing users
    const handleChange = (e) => {
        const { name, value } = e.target;

        setUserInfo(prevState => ({
            ...prevState,
            [name]: value,
        }));
    };

    // Pop up selected skills
    const handleMultipleChange = (item) => {
    if (!userInfo.skills.includes(item)) {
        setUserInfo((prevUserInfo) => ({
            ...prevUserInfo,
            skills: [...prevUserInfo.skills, item], 
        }));
    }
    };

    // pop up selected dates
    const handleDateChange = (e) => {
        const date = e.target.value;
        if (date && !formData.availability.includes(date)) {
            setFormData((prevData) => ({
                ...prevData,
                availability: [...prevData.availability, date],
                selectedDate: e.target.value
            }));
        }
    };

    // Delete selected skills/availability
    const handleRemoveItem = (type, itemToRemove) => {
    setUserInfo((prevUserInfo) => ({
        ...prevUserInfo,
        [type]: prevUserInfo[type].filter(item => item !== itemToRemove),
    }));
    };
    
    // Handle save button
    const saveInfo = (e) => {
        e.preventDefault();
        // try {
          fetch(`http://127.0.0.1:5000/api/userprofile/${userInfo.id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(userInfo),
          })
          .then((response) => {
            if (response.ok) {
                alert('User info updated successfully');
            } else {
                alert('Failed to update user info');
            }
        })
      };
    return (
        <>
            <Navbar />

            <div className="userprofilepage">
                <br /><label className="instruction">Complete your profile before proceeding</label><br /><br />
                <div className="centered-square">
                    <form>
                        <div className="pad-10">
                            <label>Full name</label>
                            <label className="required">*</label><br />
                            <input className="inputbox" type="text" name="fullname" maxLength="50" required value={userInfo.fullname} onChange={handleChange}></input>
                        </div>
                        <div className="pad-10">
                            <label>Address 1</label>
                            <label className="required">*</label><br />
                            <input className="inputbox" type="text" name="address1" maxLength="100" required value={userInfo.address1} onChange={handleChange}></input>
                        </div>
                        <div className="pad-10">
                            <label>Address 2 </label><br />
                            <input className="inputbox" type="text" name="address1" maxLength="100" value={userInfo.address2} onChange={handleChange}></input>
                        </div>
                        <div className="pad-10">
                            <label>City</label>
                            <label className="required">*</label><br />
                            <input className="inputbox" type="text" name="city" maxLength="100" required value={userInfo.city} onChange={handleChange}></input>
                        </div>
                        <div className="pad-10">
                            <label>State</label>
                            <label className="required">*</label><br />
                            <select className="state-box" name="state" required value={userInfo.state} onChange={handleChange}>
                                <option value="AL">Alabama</option>
                                <option value="AK">Alaska</option>
                                <option value="AZ">Arizona</option>
                                <option value="AR">Arkansas</option>
                                <option value="CA">California</option>
                                <option value="CO">Colorado</option>
                                <option value="CT">Connecticut</option>
                                <option value="DE">Delaware</option>
                                <option value="FL">Florida</option>
                                <option value="GA">Georgia</option>
                                <option value="HI">Hawaii</option>
                                <option value="ID">Idaho</option>
                                <option value="IL">Illinois</option>
                                <option value="IN">Indiana</option>
                                <option value="IA">Iowa</option>
                                <option value="KS">Kansas</option>
                                <option value="KY">Kentucky</option>
                                <option value="LA">Louisiana</option>
                                <option value="ME">Maine</option>
                                <option value="MD">Maryland</option>
                                <option value="MA">Massachusetts</option>
                                <option value="MI">Michigan</option>
                                <option value="MN">Minnesota</option>
                                <option value="MS">Mississippi</option>
                                <option value="MO">Missouri</option>
                                <option value="MT">Montana</option>
                                <option value="NE">Nebraska</option>
                                <option value="NV">Nevada</option>
                                <option value="NH">New Hampshire</option>
                                <option value="NJ">New Jersey</option>
                                <option value="NM">New Mexico</option>
                                <option value="NY">New York</option>
                                <option value="NC">North Carolina</option>
                                <option value="ND">North Dakota</option>
                                <option value="OH">Ohio</option>
                                <option value="OK">Oklahoma</option>
                                <option value="OR">Oregon</option>
                                <option value="PA">Pennsylvania</option>
                                <option value="RI">Rhode Island</option>
                                <option value="SC">South Carolina</option>
                                <option value="SD">South Dakota</option>
                                <option value="TN">Tennessee</option>
                                <option value="TX">Texas</option>
                                <option value="UT">Utah</option>
                                <option value="VT">Vermont</option>
                                <option value="VA">Virginia</option>
                                <option value="WA">Washington</option>
                                <option value="WV">West Virginia</option>
                                <option value="WI">Wisconsin</option>
                                <option value="WY">Wyoming</option>
                            </select>
                        </div>
                        <div className="pad-10">
                            <label>Zip code</label>
                            <label className="required">*</label><br />
                            <input className="inputbox" type="text" name="zipcode" maxLength="9" minLength="5" require value={userInfo.zipcode} onChange={handleChange}d></input>
                        </div>
                        <div className="pad-10">
                            <label>Skills</label>
                            <label className="required">*</label><br />
                            <select className="selectbox" name="skills" size="2" required value={userInfo.skills} onChange={handleChange}>
                                <option value="adaptability" onClick={() => handleMultipleChange('Adaptability')}> Adaptability</option>
                                <option value="children" onClick={() => handleMultipleChange('Good with Children')}>Good with Children</option>
                                <option value="communication" onClick={() => handleMultipleChange('Communication')}>Communication</option>
                                <option value="creativity" onClick={() => handleMultipleChange('Creativity')}>Creativity</option>
                                <option value="responsibility" onClick={() => handleMultipleChange('Responsibility')}>Responsibility</option>
                                <option value="flexibility" onClick={() => handleMultipleChange('Flexibility')}>Flexibility</option>
                                <option value="leadership" onClick={() => handleMultipleChange('Leadership')}>Leadership</option>
                                <option value="organized" onClick={() => handleMultipleChange('Organized')}>Organized</option>
                                <option value="patience" onClick={() => handleMultipleChange('Patience')}>Patience</option>
                                <option value="problem" onClick={() => handleMultipleChange('Problem Solver')}>Problem Solver</option>
                                <option value="teamwork" onClick={() => handleMultipleChange('Teamwork')}>Teamwork</option>
                                <option value="time" onClick={() => handleMultipleChange('Time Management')}>Time Management</option>
                            </select>

                            <div className="selected-skills">
                                {userInfo.skills.map((skill, index) => (
                                <div key={index} className="skill-item">
                                    <p>{skill}</p>
                                    <button type="button" className="remove-skill" onClick={() => handleRemoveItem('skills', skill)}>x</button>
                                </div>
                                ))}
                            </div>
                        </div>
                        <div className="pad-10">
                            <label>Preference</label><br />
                            <textarea className="inputbox" name="preferences" value={userInfo.preference} onChange={handleChange}></textarea>
                        </div>
                        <div className="pad-10">
                            <label>Availability</label>
                            <label className="required">*</label><br />
                            <input className="inputbox" type="date" multiple required value={formData.selectedDate} onChange={handleDateChange}></input>
                            <div className="selected-availability">
                                {userInfo.availability.map((date, index) => (
                                <div key={index} className="availability-item">
                                    {date}
                                    <button type="button" className="remove-availability" onClick={() => handleRemoveItem('availability', date)}>x</button>
                                </div>
                                ))}
                            </div>
                        </div>
                        <div className="pad-10">
                            <button className="saveButton" onClick={saveInfo}>Save</button>
                        </div>
                    </form>
                </div>
            </div>
            <br />
            <Footer />
        </>
    )
}

export default UserProfile

volunteerhistory.jsx
import React, { useState, useEffect } from 'react';
import Navbar from "../../components/Navbar/Navbar"
import Footer from "../../components/Footer/Footer"
import "./volunteerhistory.css"

function VolunteerHistory() {
  const userInfo = {
    fullName: "Elon Musk",
    city: "Houston",
    state: "TX",
    volunteerDone: 3,
  };

  const [volunteerJobs, setVolunteerJobs] = useState([])
  useEffect(() => {
      fetch("http://127.0.0.1:5000/api/volunteerhistory", {
          method: 'GET',
          credentials: 'include',
      })
          .then(response => {
              if (!response.ok) {
                  console.error('Unable to load history:', response.statusText);
                  return; // Exit the promise chain
              }
              return response.json();
          })
          .then(data => {
              setVolunteerJobs(data);
          })
          .catch(error => console.error('Error:', error));
  }, []);

  return (
    <div className="page-container">
      <Navbar />

      <main className="main-content">
        <div className="historypage">
          <div className="left-col">
            <h3>{userInfo.fullName}</h3>
            <p> {userInfo.city}, {userInfo.state} </p>
            <p> Amount of Volunteer done: {userInfo.volunteerDone}</p>
          </div>

          <div className="right-col">
            <h2> Volunteer History </h2>
            {volunteerJobs.length === 0 ? 
              (<p>This persion has no volunteer history.</p>):
              (volunteerJobs.map((job, index) => (
              <div key={index} className="event-card">
                <h3>{job.eventName}</h3>
                <p><strong>Date:</strong> {job.eventDate}</p>
                <p><strong>Description:</strong> {job.description}</p>
                <p><strong>Location:</strong> {job.location}</p>
                <p><strong>Required Skills:</strong> {job.skills.join(", ")}</p>
                <p><strong>Urgency:</strong> {job.urgency}</p>
                <p><strong>Status:</strong> {job.eventStatus} </p>
                <p><strong></strong></p>
              </div>
            ))
          )}
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default VolunteerHistory;
